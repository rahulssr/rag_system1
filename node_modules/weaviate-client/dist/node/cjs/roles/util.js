'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.Map = exports.PermissionGuards = void 0;
class PermissionGuards {}
exports.PermissionGuards = PermissionGuards;
PermissionGuards.includes = (permission, ...actions) =>
  actions.filter((a) => Array.from(permission.actions).includes(a)).length > 0;
PermissionGuards.isBackups = (permission) => PermissionGuards.includes(permission, 'manage_backups');
PermissionGuards.isCluster = (permission) => PermissionGuards.includes(permission, 'read_cluster');
PermissionGuards.isCollections = (permission) =>
  PermissionGuards.includes(
    permission,
    'create_collections',
    'delete_collections',
    'read_collections',
    'update_collections',
    'manage_collections'
  );
PermissionGuards.isData = (permission) =>
  PermissionGuards.includes(
    permission,
    'create_data',
    'delete_data',
    'read_data',
    'update_data',
    'manage_data'
  );
PermissionGuards.isNodes = (permission) => PermissionGuards.includes(permission, 'read_nodes');
PermissionGuards.isRoles = (permission) =>
  PermissionGuards.includes(permission, 'create_role', 'read_roles', 'update_roles', 'delete_roles');
PermissionGuards.isUsers = (permission) =>
  PermissionGuards.includes(permission, 'read_users', 'assign_and_revoke_users');
PermissionGuards.isPermission = (permissions) => !Array.isArray(permissions);
PermissionGuards.isPermissionArray = (permissions) =>
  Array.isArray(permissions) && permissions.every(PermissionGuards.isPermission);
PermissionGuards.isPermissionMatrix = (permissions) =>
  Array.isArray(permissions) && permissions.every(PermissionGuards.isPermissionArray);
PermissionGuards.isPermissionTuple = (permissions) =>
  Array.isArray(permissions) &&
  permissions.every(
    (permission) =>
      PermissionGuards.isPermission(permission) || PermissionGuards.isPermissionArray(permission)
  );
class Map {}
exports.Map = Map;
Map.flattenPermissions = (permissions) => (!Array.isArray(permissions) ? [permissions] : permissions.flat(2));
Map.permissionToWeaviate = (permission) => {
  if (PermissionGuards.isBackups(permission)) {
    return Array.from(permission.actions).map((action) => ({
      backups: { collection: permission.collection },
      action,
    }));
  } else if (PermissionGuards.isCluster(permission)) {
    return Array.from(permission.actions).map((action) => ({ action }));
  } else if (PermissionGuards.isCollections(permission)) {
    return Array.from(permission.actions).map((action) => ({
      collections: { collection: permission.collection },
      action,
    }));
  } else if (PermissionGuards.isData(permission)) {
    return Array.from(permission.actions).map((action) => ({
      data: { collection: permission.collection },
      action,
    }));
  } else if (PermissionGuards.isNodes(permission)) {
    return Array.from(permission.actions).map((action) => ({
      nodes: { collection: permission.collection, verbosity: permission.verbosity },
      action,
    }));
  } else if (PermissionGuards.isRoles(permission)) {
    return Array.from(permission.actions).map((action) => ({ roles: { role: permission.role }, action }));
  } else if (PermissionGuards.isUsers(permission)) {
    return Array.from(permission.actions).map((action) => ({ users: { users: permission.users }, action }));
  } else {
    throw new Error(`Unknown permission type: ${JSON.stringify(permission, null, 2)}`);
  }
};
Map.roleFromWeaviate = (role) => {
  const perms = {
    backups: {},
    cluster: {},
    collections: {},
    data: {},
    nodes: {},
    roles: {},
    users: {},
  };
  role.permissions.forEach((permission) => {
    if (permission.backups !== undefined) {
      const key = permission.backups.collection;
      if (key === undefined) throw new Error('Backups permission missing collection');
      if (perms.backups[key] === undefined) perms.backups[key] = { collection: key, actions: [] };
      perms.backups[key].actions.push(permission.action);
    } else if (permission.action === 'read_cluster') {
      if (perms.cluster[''] === undefined) perms.cluster[''] = { actions: [] };
      perms.cluster[''].actions.push('read_cluster');
    } else if (permission.collections !== undefined) {
      const key = permission.collections.collection;
      if (key === undefined) throw new Error('Collections permission missing collection');
      if (perms.collections[key] === undefined) perms.collections[key] = { collection: key, actions: [] };
      perms.collections[key].actions.push(permission.action);
    } else if (permission.data !== undefined) {
      const key = permission.data.collection;
      if (key === undefined) throw new Error('Data permission missing collection');
      if (perms.data[key] === undefined) perms.data[key] = { collection: key, actions: [] };
      perms.data[key].actions.push(permission.action);
    } else if (permission.nodes !== undefined) {
      let { collection } = permission.nodes;
      const { verbosity } = permission.nodes;
      if (verbosity === undefined) throw new Error('Nodes permission missing verbosity');
      if (verbosity === 'verbose') {
        if (collection === undefined) throw new Error('Nodes permission missing collection');
      } else if (verbosity === 'minimal') collection = '*';
      else throw new Error('Nodes permission missing verbosity');
      const key = `${collection}#${verbosity}`;
      if (perms.nodes[key] === undefined) perms.nodes[key] = { collection, verbosity, actions: [] };
      perms.nodes[key].actions.push(permission.action);
    } else if (permission.roles !== undefined) {
      const key = permission.roles.role;
      if (key === undefined) throw new Error('Roles permission missing role');
      if (perms.roles[key] === undefined) perms.roles[key] = { role: key, actions: [] };
      perms.roles[key].actions.push(permission.action);
    } else if (permission.users !== undefined) {
      const key = permission.users.users;
      if (key === undefined) throw new Error('Users permission missing user');
      if (perms.users[key] === undefined) perms.users[key] = { users: key, actions: [] };
      perms.users[key].actions.push(permission.action);
    }
  });
  return {
    name: role.name,
    backupsPermissions: Object.values(perms.backups),
    clusterPermissions: Object.values(perms.cluster),
    collectionsPermissions: Object.values(perms.collections),
    dataPermissions: Object.values(perms.data),
    nodesPermissions: Object.values(perms.nodes),
    rolesPermissions: Object.values(perms.roles),
    usersPermissions: Object.values(perms.users),
  };
};
Map.roles = (roles) =>
  roles.reduce((acc, role) => {
    acc[role.name] = Map.roleFromWeaviate(role);
    return acc;
  }, {});
Map.users = (users) =>
  users.reduce((acc, user) => {
    acc[user] = { id: user };
    return acc;
  }, {});
Map.user = (user) => {
  var _a;
  return {
    id: user.username,
    roles: (_a = user.roles) === null || _a === void 0 ? void 0 : _a.map(Map.roleFromWeaviate),
  };
};
